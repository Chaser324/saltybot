// Generated by CoffeeScript 1.6.3
var Bot, Fighter, Match, Tournament, allowCrossDomain, app, db, express, models, mongoose, path, port;

express = require('express');

path = require('path');

mongoose = require('mongoose');

models = require('./models');

Bot = null;

Tournament = null;

Fighter = null;

Match = null;

db = null;

app = express();

allowCrossDomain = function(req, res, next) {
  res.header('Access-Control-Allow-Origin', '*');
  res.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE');
  res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization');
  if ('OPTIONS' === req.method) {
    return res.send(200);
  } else {
    return next();
  }
};

app.configure(function() {
  app.use(express.bodyParser());
  app.use(express.methodOverride());
  app.use(app.router);
  app.use(allowCrossDomain);
  return app.use(express.errorHandler({
    dumpExceptions: true,
    showStack: true
  }));
});

models.defineModels(mongoose, function() {
  app.Bot = Bot = mongoose.model('Bot');
  app.Tournament = Tournament = mongoose.model('Tournament');
  app.Fighter = Fighter = mongoose.model('Fighter');
  app.Match = Match = mongoose.model('Match');
  return db = mongoose.connect('mongodb://localhost/salty_db');
});

app.get('/api', function(req, res) {
  return res.send('API is running');
});

app.get('/api/bot', function(req, res) {
  return Bot.find(function(err, botinfo) {
    if (!err) {
      return res.send(botinfo);
    } else {
      return console.log(err);
    }
  });
});

app.put('/api/bot', function(req, res) {
  return Bot.findOne(function(err, bot) {
    bot.correct = req.body.correct;
    bot.wrong = req.body.wrong;
    bot.total_matches = req.body.correct + req.body.wrong;
    bot.net_gain = req.body.net_gain;
    if (bot.total_matches > 0) {
      bot.correct_rate = bot.correct / bot.total_matches;
    } else {
      bot.correct_rate = 0;
    }
    return bot.save(function(err) {
      if (!err) {
        console.log('bot updated');
      } else {
        console.log(err);
      }
      return res.send(bot);
    });
  });
});

app.get('/api/fighter', function(req, res) {
  return Fighter.find(function(err, fighters) {
    if (!err) {
      return res.send(fighters);
    } else {
      return console.log(err);
    }
  });
});

app.get('/api/fighter/:name', function(req, res) {
  return Fighter.findOne({
    name: req.params.name
  }, function(err, fighter) {
    if (!err) {
      return res.send(fighter);
    } else {
      return console.log(err);
    }
  });
});

app.post('/api/fighter', function(req, res) {
  var fighter;
  fighter = new Fighter({
    name: req.body.name,
    total_matches: req.body.wins + req.body.losses,
    wins: req.body.wins,
    losses: req.body.losses,
    wagered: req.body.wagered,
    net_payout: req.body.net_payout,
    roi: req.body.wagered > 0 ? req.body.net_payout / req.body.wagered : 0,
    tournaments: req.body.tournaments,
    matches: req.body.matches
  });
  fighter.save(function(err) {
    if (!err) {
      return console.log('created fighter');
    } else {
      return console.log(err);
    }
  });
  return res.send(fighter);
});

app.put('/api/fighter/:name', function(req, res) {
  return Fighter.findOne({
    name: req.params.name
  }, function(err, fighter) {
    fighter.wins = req.body.wins;
    fighter.losses = req.body.losses;
    fighter.total_matches = req.body.wins + req.body.losses;
    ({
      wagered: req.body.wagered,
      net_payout: req.body.net_payout,
      roi: req.body.wagered > 0 ? req.body.net_payout / req.body.wagered : 0,
      tournaments: req.body.tournaments,
      matches: req.body.matches
    });
    return fighter.save(function(err) {
      if (!err) {
        console.log('fighter updated');
      } else {
        console.log(err);
      }
      return res.send(fighter);
    });
  });
});

app.get('/api/match', function(req, res) {
  return Match.find(function(err, matches) {
    if (!err) {
      return res.send(matches);
    } else {
      return console.log(err);
    }
  });
});

app.get('/api/match/:id', function(req, res) {
  return Match.findById(req.params.id, function(err, match) {
    if (!err) {
      return res.send(match);
    } else {
      return console.log(err);
    }
  });
});

app.post('/api/match', function(req, res) {
  var match;
  match = new Match({
    winner: req.body.winner,
    loser: req.body.loser,
    time: req.body.time,
    length: req.body.length,
    tournament: req.body.tournament,
    winner_bet: req.body.winner_bet,
    loser_bet: req.body.loser_bet
  });
  match.save(function(err) {
    if (!err) {
      return console.log('created match');
    } else {
      return console.log(err);
    }
  });
  return res.send(match);
});

app.get('/api/tournament', function(req, res) {
  return Tournament.find(function(err, tournaments) {
    if (!err) {
      return res.send(tournaments);
    } else {
      return console.log(err);
    }
  });
});

app.get('/api/tournament/:id', function(req, res) {
  return Tournament.findById(req.params.id, function(err, tournament) {
    if (!err) {
      return res.send(tournament);
    } else {
      return console.log(err);
    }
  });
});

app.post('/api/tournament', function(req, res) {
  var tournament;
  tournament = new Tournament({
    name: req.body.name
  });
  return tournament.save(function(err) {
    if (!err) {
      return console.log('created tournament');
    } else {
      return console.log(err);
    }
  });
});

port = 4711;

app.listen(port, function() {
  return console.log('Server running on port %d in %s mode', port, app.settings.env);
});
