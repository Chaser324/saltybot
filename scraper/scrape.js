// Generated by CoffeeScript 1.6.3
var baseUrl, betStatusBlueWins, betStatusClosed, betStatusOpen, betStatusRedWins, blueBet, blueFighter, casper, currentTournament, f, getFighter, loginUrl, matchLength, matchStartTime, redBet, redFighter, userinfo, utils, wagerAmount, wagerFighter;

userinfo = require('./userinfo');

casper = require('casper').create({
  pageSettings: {
    loadImages: false,
    loadPlugins: false
  }
});

utils = require('utils');

f = utils.format;

loginUrl = 'http://www.saltybet.com/authenticate?signin=1';

baseUrl = 'http://www.saltybet.com/';

betStatusOpen = 'bets are open';

betStatusBlueWins = 'payouts to team blue';

betStatusRedWins = 'payouts to team red';

betStatusClosed = 'bets are locked until the next match';

currentTournament = '';

redFighter = '';

blueFighter = '';

redBet = 0;

blueBet = 0;

wagerFighter = '';

wagerAmount = 0;

matchLength = 0;

matchStartTime = 0;

casper.checkStep = function(self, onComplete) {
  var err, step;
  if (self.pendingWait || self.loadInProgress) {
    return;
  }
  self.current = self.step;
  step = self.steps[self.step++];
  if (utils.isFunction(step)) {
    self.runStep(step);
    return step.executed = true;
  } else {
    self.result.time = new Date().getTime() - self.startTime;
    self.log(f("Done %s steps in %dms", self.steps.length, self.result.time), "info");
    clearInterval(self.checker);
    self.emit('run.complete');
    if (utils.isFunction(onComplete)) {
      try {
        return onComplete.call(self, self);
      } catch (_error) {
        err = _error;
        return self.log("Could not complete final step: " + err, "error");
      }
    } else {
      return self.exit();
    }
  }
};

casper.then = function(step) {
  var e, insertIndex;
  if (!this.started) {
    throw new CasperError("Casper not started please use Casper#start");
  }
  if (!utils.isFunction(step)) {
    throw new CasperError("You can only define a step as a function");
  }
  if (this.checker === null) {
    step.level = 0;
    this.steps.push(step);
    step.executed = false;
    this.emit('step.added', step);
  } else {
    if (!this.steps[this.current].executed) {
      try {
        step.level = this.steps[this.current].level + 1;
      } catch (_error) {
        e = _error;
        step.level = 0;
      }
      insertIndex = this.step;
      while (this.steps[insertIndex] && step.level === this.steps[insertIndex].level) {
        insertIndex++;
      }
      this.steps.splice(insertIndex, 0, step);
      step.executed = false;
      this.emit('step.added', step);
    }
  }
  return this;
};

casper.label = function(labelname) {
  var step;
  step = new Function('"empty function for label: ' + labelname + ' "');
  step.label = labelname;
  return this.then(step);
};

casper.goto = function(labelname) {
  var i, _i, _ref, _results;
  _results = [];
  for (i = _i = 0, _ref = this.steps.length; _i < _ref; i = _i += 1) {
    if (this.steps[i].label === labelname) {
      _results.push(this.step = i);
    } else {
      _results.push(void 0);
    }
  }
  return _results;
};

getFighter = function() {
  var complete, fighter, wsurl;
  complete = false;
  fighter = null;
  wsurl = 'http://localhost:4711/api/fighter/Thanos';
  fighter = __utils__.sendAJAX(wsurl, 'GET', null, false);
  __utils__.echo(fighter);
  return JSON.parse(fighter);
};

casper.start(loginUrl, function() {
  return this.fill('form#signinform', {
    'email': userinfo.username,
    'pword': userinfo.password
  }, true);
});

casper.label("PLACE_BETS");

casper.wait(3000);

casper.then(function() {
  var betStatus;
  betStatus = this.evaluate(function() {
    return $('#betstatus').text();
  });
  if ((betStatus.toLowerCase().indexOf(betStatusOpen)) < 0) {
    return this.goto("PLACE_BETS");
  }
});

casper.then(function() {
  var redFighterData;
  currentTournament = this.evaluate(function() {
    return $('#tournamentname').text();
  });
  redFighter = this.evaluate(function() {
    return $('#p1name').text();
  });
  blueFighter = this.evaluate(function() {
    return $('#p2name').text();
  });
  this.echo('entering eval');
  redFighterData = this.evaluate(getFighter);
  this.echo(redFighterData);
  wagerAmount = 10;
  wagerFighter = redFighter;
  this.echo('Current Match: ' + redFighter + ' vs ' + blueFighter);
  this.echo('Betting ' + wagerAmount + ' on ' + wagerFighter);
  this.evaluate((function(amount) {
    return $('#wager').val(amount);
  }), wagerAmount);
  if (wagerFighter === redFighter) {
    return this.click('input.betbuttonred');
  } else if (wagerFighter === blueFighter) {
    return this.click('input.betbuttonblue');
  }
});

casper.label("BETTING_CLOSED");

casper.wait(3000);

casper.then(function() {
  var betStatus;
  betStatus = this.evaluate(function() {
    return $('#betstatus').text();
  });
  if ((betStatus.toLowerCase().indexOf(betStatusClosed)) < 0) {
    return this.goto("BETTING_CLOSED");
  }
});

casper.then(function() {
  this.echo('Getting betting details');
  redBet = this.evaluate(function() {
    return $('#player1wager').text();
  });
  blueBet = this.evaluate(function() {
    return $('#player2wager').text();
  });
  redBet = redBet.slice(1);
  blueBet = blueBet.slice(1);
  return matchStartTime = new Date();
});

casper.label("GET_RESULTS");

casper.wait(3000);

casper.then(function() {
  var betStatus, loseBet, loser, matchComplete, winBet, winner;
  matchComplete = false;
  winner = '';
  loser = '';
  winBet = 0;
  loseBet = 0;
  betStatus = this.evaluate(function() {
    return $('#betstatus').text();
  });
  if ((betStatus.toLowerCase().indexOf(betStatusRedWins)) >= 0) {
    matchComplete = true;
    winner = redFighter;
    loser = blueFighter;
    winBet = redBet;
    loseBet = blueBet;
  } else if ((betStatus.toLowerCase().indexOf(betStatusBlueWins)) >= 0) {
    matchComplete = true;
    winner = blueFighter;
    loser = redFighter;
    winBet = blueBet;
    loseBet = redBet;
  } else if ((betStatus.toLowerCase().indexOf(betStatusOpen)) >= 0) {
    this.goto("PLACE_BETS");
  } else {
    this.goto("GET_RESULTS");
  }
  if (matchComplete === true) {
    matchLength = new Date().getTime() - matchStartTime.getTime();
    this.echo('Winner: ' + winner + '(' + winBet + ')');
    this.echo('Loser: ' + loser + '(' + loseBet + ')');
    return this.echo('Match Length: ' + matchLength);
  }
});

casper.then(function() {
  return this.goto("PLACE_BETS");
});

casper.run();
